# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of finitely presented bialgebras

####################################
##
#! @Section GAP categories
##
####################################

#! @Description
#!  The &GAP; category of categories of finitely presented bialgebras.
#! @Arguments category
DeclareCategory( "IsCategoryOfFpBialgebras", IsCapCategory );

#! @Description
#!  The &GAP; category of finitely presented bialgebras.
#! @Arguments object
DeclareCategory( "IsObjectInCategoryOfFpBialgebras", IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms of finitely presented bialgebras.
#! @Arguments morphism
DeclareCategory( "IsMorphismInCategoryOfFpBialgebras", IsCapCategoryMorphism );

####################################
##
#! @Section Attributes
##
####################################

#! @Description
#!  The input is a category of finitely presented $k$-bialgebras.
#!  The output is an underlying category of finitely presented $k$-algebras.
#! @Arguments FpBialg_k
DeclareAttribute( "UnderlyingCategory", IsCategoryOfFpBialgebras );

CapJitAddTypeSignature( "UnderlyingCategory", [ IsCategoryOfFpBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategory( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented $k$-bialgebras.
#!  The output is an underlying category of $k$-matrices.
#! @Arguments FpAlg_k
DeclareAttribute( "UnderlyingCategoryOfMatrices", IsCategoryOfFpBialgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfMatrices", [ IsCategoryOfFpBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfMatrices( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented $k$-bialgebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments FpBialg_k
DeclareAttribute( "CoefficientsRing", IsCategoryOfFpBialgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsCategoryOfFpBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a finitely presented associative unital $k$-bialgebra.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments fp_bialgebra
DeclareAttribute( "CoefficientsRing", IsObjectInCategoryOfFpBialgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsObjectInCategoryOfFpBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( CapCategory( input_types[1].category ) ) );
    
end );

#! @Arguments fp_bialgebra
DeclareAttribute( "DefiningNonupleOfFinitelyPresentedBialgebra",
        IsObjectInCategoryOfFpBialgebras );

#! @Arguments fp_bialgebra_morphism
DeclareAttribute( "ListOfImages",
        IsMorphismInCategoryOfFpBialgebras );

#! @Arguments fp_bialgebra
DeclareAttribute( "UnderlyingFpAlgebra",
        IsObjectInCategoryOfFpBialgebras );

#! @Description
#!  The input is a finitely presented bialgebra.
#!  The output is the number of generators.
#! @Arguments fp_bialgebra
DeclareOperation( "NrGenerators",
        [ IsObjectInCategoryOfFpBialgebras ] );

#! @Description
#!  The input is a finitely presented bialgebra.
#!  The output is the list of generators of the underlying finitely presented bialgebra.
#! @Arguments fp_bialgebra
DeclareAttribute( "Generators",
        IsObjectInCategoryOfFpBialgebras );

#! @Description
#!  The input is a finitely presented $k$-bialgebra.
#!  The output is the corresponding ambient free $k$-algebra
#!  as a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_bialgebra
DeclareAttribute( "AssociatedLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpBialgebras );

#! @Description
#!  The input is a finitely presented bialgebra.
#!  The output its list of defining relations.
#! @Arguments fp_bialgebra
DeclareAttribute( "DefiningRelations",
        IsObjectInCategoryOfFpBialgebras );

#! @Description
#!  The input is a finitely presented bialgebra.
#!  The output is the Gr√∂bner basis of its list of defining relations.
#! @Arguments fp_bialgebra
DeclareAttribute( "GroebnerBasisOfDefiningRelations",
        IsObjectInCategoryOfFpBialgebras );

#! @Description
#!  The input is a finitely presented $k$-bialgebra.
#!  The output is the corresponding underlying finitely presented associative unital $k$-algebra
#!  as a quotient of a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_bialgebra
DeclareAttribute( "AssociatedQuotientCategoryOfLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpBialgebras );

#! @Description
#!  The input is a finitely presented $k$-bialgebra.
#!  The output its $k$-dimension.
#! @Arguments fp_bialgebra
DeclareAttribute( "Dimension",
        IsObjectInCategoryOfFpBialgebras );

#! @Arguments fp_bialgebra_morphism
DeclareAttribute( "AssociatedFunctorOfLinearClosuresOfPathCategoriesData",
        IsMorphismInCategoryOfFpBialgebras );

#! @Arguments fp_bialgebra
DeclareAttribute( "OppositeAlgebra",
        IsObjectInCategoryOfFpBialgebras );

#! @Arguments fp_algebra
DeclareAttribute( "Bimonoid",
        IsObjectInCategoryOfFpAlgebras );

#! @Arguments fp_algebra
DeclareAttribute( "AffineVarietyOfBimonoids",
        IsObjectInCategoryOfFpAlgebras );

#! @Arguments bimonoid
DeclareAttribute( "UnderlyingFpBialgebra",
        IsObjectInCategoryOfInternalBimonoids );

#! @Arguments fp_bialgebra
DeclareAttribute( "FpBialgebraAsInternalBimonoid",
        IsObjectInCategoryOfFpBialgebras );

####################################
##
#! @Section Operations
##
####################################

if false then
#! @Arguments fp_bialgebra, BimonB
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpBialgebras, IsCategoryOfInternalBimonoids ] );
fi;

#! @Arguments fp_algebra, ring_map, mor
DeclareOperation( "BaseChangeToDifferentLinearClosure",
        [ IsObjectInCategoryOfFpBialgebras, IsHomalgRingMap, IsLinearClosureMorphism ] );

#! @Arguments mor, fp_bialgebra
DeclareOperation( "/",
        [ IsLinearClosureMorphism, IsObjectInCategoryOfFpBialgebras ] );

#! @Arguments fp_bialgebra, antipode_on_generators
DeclareOperation( "Antipode",
        [ IsObjectInCategoryOfFpBialgebras, IsList ] );

#! @Arguments FpBialg_k, fp_algebra_morphism
DeclareOperation( "AsMorphismInUnderlyingCategory",
        [ IsCategoryOfFpBialgebras, IsMorphismInCategoryOfFpBialgebras ] );

####################################
##
#! @Section Constructors
##
####################################

DeclareOperation( "CATEGORY_OF_FP_BIALGEBRAS",
        [ IsCategoryOfFpAlgebras ] );

#! @Description
#!  The input is a category of finitely presented $k$-algebra over a commutative ring $k$.
#!  The output is the category of finitely presented bialgebras over $k$.
#! @Arguments FpAlg_k
DeclareAttribute( "CategoryOfFpBialgebras", IsCategoryOfFpAlgebras );
#! @InsertChunk CategoryOfFpBialgebras

CapJitAddTypeSignature( "CategoryOfFpBialgebras", [ IsCategoryOfFpAlgebras ], function ( input_types )
    
    return CapJitDataTypeOfCategory( CategoryOfFpBialgebras( input_types[1].category ) );
    
end );

#! @Arguments lin_cat
DeclareAttribute( "CategoryOfFpBialgebras", IsCapCategory and IsLinearCategoryOverCommutativeRing );

#! @Description
#!  The input is a commutative ring <A>k</A>.
#!  The output is the category of finitely presented bialgebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpBialgebras", IsHomalgRing and IsCommutative );

#! @Arguments FpBialg_R, ring_map, fp_bialgebra
DeclareOperation( "Pullback",
        [ IsCategoryOfFpBialgebras, IsHomalgRingMap, IsObjectInCategoryOfFpBialgebras ] );

#! @Arguments ring_map, fp_bialgebra
DeclareOperation( "Pullback",
        [ IsHomalgRingMap, IsObjectInCategoryOfFpBialgebras ] );

if false then
#! @Arguments fp_bialgebra, FpBialg_R
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpBialgebras, IsCategoryOfFpBialgebras ] );
fi;

#! @Arguments R, fp_bialgebra
DeclareOperation( "*",
        [ IsHomalgRing, IsObjectInCategoryOfFpBialgebras ] );

#! @Arguments FpBialg_k, fp_algebra, counit, comult
DeclareOperation( "Bimonoid",
        [ IsCategoryOfFpBialgebras, IsObjectInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras ] );

#! @Arguments fp_algebra, counit, comult
DeclareOperation( "Bimonoid",
        [ IsObjectInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras ] );

#! @Arguments FpBialg_k, fp_algebra, counit_on_generators, comult_on_generators
DeclareOperation( "Bimonoid",
        [ IsCategoryOfFpBialgebras, IsObjectInCategoryOfFpAlgebras, IsList, IsList ] );

#! @Arguments fp_algebra, counit_on_generators, comult_on_generators
DeclareOperation( "Bimonoid",
        [ IsObjectInCategoryOfFpAlgebras, IsList, IsList ] );

#! @Arguments fp_algebra, counit_record, comult_record
DeclareOperation( "Bimonoid",
        [ IsObjectInCategoryOfFpAlgebras, IsRecord, IsRecord ] );

#! @Arguments fp_algebra, counit_record, comult_record
DeclareOperation( "AffineVarietyOfBimonoids",
        [ IsObjectInCategoryOfFpAlgebras, IsRecord, IsRecord ] );
