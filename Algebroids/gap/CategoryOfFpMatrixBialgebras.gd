# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of finitely presented matrix bialgebras

####################################
##
#! @Section GAP categories
##
####################################

#! @Description
#!  The &GAP; category of categories of finitely presented matrix bialgebras.
#! @Arguments category
DeclareCategory( "IsCategoryOfFpMatrixBialgebras", IsCapCategory );

#! @Description
#!  The &GAP; category of finitely presented matrix bialgebras.
#! @Arguments object
DeclareCategory( "IsObjectInCategoryOfFpMatrixBialgebras", IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms of finitely presented matrix bialgebras.
#! @Arguments morphism
DeclareCategory( "IsMorphismInCategoryOfFpMatrixBialgebras", IsCapCategoryMorphism );

####################################
##
#! @Section Attributes
##
####################################

#! @Description
#!  The input is a category of finitely presented matrix $k$-bialgebras.
#!  The output is an underlying category of finitely presented matrix $k$-algebras.
#! @Arguments FpMatBialg_k
DeclareAttribute( "UnderlyingCategory", IsCategoryOfFpMatrixBialgebras );

CapJitAddTypeSignature( "UnderlyingCategory", [ IsCategoryOfFpMatrixBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategory( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix $k$-bialgebras.
#!  The output is the underlying category of $k$-matrices.
#! @Arguments FpMatAlg_k
DeclareAttribute( "UnderlyingCategoryOfMatrices", IsCategoryOfFpMatrixBialgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfMatrices", [ IsCategoryOfFpMatrixBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfMatrices( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix $k$-bialgebras.
#!  The output is an underlying category of finitely presented $k$-algebras.
#! @Arguments FpMatAlg_k
DeclareAttribute( "AssociatedCategoryOfFpAlgebras", IsCategoryOfFpMatrixBialgebras );

CapJitAddTypeSignature( "AssociatedCategoryOfFpAlgebras", [ IsCategoryOfFpMatrixBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( AssociatedCategoryOfFpAlgebras( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix $k$-bialgebras.
#!  The output is an underlying category of finitely presented $k$-bialgebras.
#! @Arguments FpMatAlg_k
DeclareAttribute( "AssociatedCategoryOfFpBialgebras", IsCategoryOfFpMatrixBialgebras );

CapJitAddTypeSignature( "AssociatedCategoryOfFpBialgebras", [ IsCategoryOfFpMatrixBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( AssociatedCategoryOfFpBialgebras( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix $k$-bialgebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments FpMatBialg_k
DeclareAttribute( "CoefficientsRing", IsCategoryOfFpMatrixBialgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsCategoryOfFpMatrixBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "CoefficientsRing", IsObjectInCategoryOfFpMatrixBialgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsObjectInCategoryOfFpMatrixBialgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( CapCategory( input_types[1].category ) ) );
    
end );

#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "DefiningTripleOfFinitelyPresentedMatrixBialgebra",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Arguments fp_matrix_bialgebra_morphism
DeclareAttribute( "UnderlyingMorphismInCategoryOfFpMatrixAlgebras",
        IsMorphismInCategoryOfFpMatrixBialgebras );

#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "UnderlyingFpMatrixAlgebra",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Description
#!  The input is a finitely presented matrix bialgebra.
#!  The output is the number of generators.
#! @Arguments fp_matrix_bialgebra
DeclareOperation( "NrGenerators",
        [ IsObjectInCategoryOfFpMatrixBialgebras ] );

#! @Description
#!  The input is a finitely presented matrix bialgebra.
#!  The output is the list of generators of the underlying finitely presented bialgebra.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "Generators",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output is the corresponding ambient free $k$-algebra
#!  as a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "AssociatedLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Description
#!  The input is a finitely presented matrix bialgebra.
#!  The output its list of defining relations.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "DefiningRelations",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Description
#!  The input is a finitely presented matrix bialgebra.
#!  The output is the Gr√∂bner basis of its list of defining relations.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "GroebnerBasisOfDefiningRelations",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output is the corresponding underlying finitely presented associative unital $k$-algebra
#!  as a quotient of a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "AssociatedQuotientCategoryOfLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output its $k$-dimension.
#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "Dimension",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "OppositeAlgebra",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Arguments fp_matrix_algebra
DeclareAttribute( "Bimonoid",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Arguments fp_matrix_algebra
DeclareAttribute( "AffineVarietyOfBimonoids",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output is is the underlying finitely presented $k$-bialgebra.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "UnderlyingFpBialgebra",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Arguments bimonoid
DeclareAttribute( "UnderlyingFpMatrixBialgebra",
        IsObjectInCategoryOfInternalBimonoids );

#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "FpMatrixBialgebraAsInternalBimonoid",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Arguments fp_bialgebra
DeclareAttribute( "YonedaFpMatrixBialgebra",
        IsObjectInCategoryOfFpBialgebras );

####################################
##
#! @Section Operations
##
####################################

if false then
#! @Arguments fp_matrix_bialgebra, BimonB
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpMatrixBialgebras, IsCategoryOfInternalBimonoids ] );
fi;

#! @Arguments fp_matrix_bialgebra, antipode_on_generators
DeclareOperation( "Antipode",
        [ IsObjectInCategoryOfFpMatrixBialgebras, IsList ] );

#! FpMatBialg_k, fp_matrix_algebra_morphism
DeclareOperation( "AsMorphismInUnderlyingCategory",
        [ IsCategoryOfFpMatrixBialgebras, IsMorphismInCategoryOfFpMatrixBialgebras ] );

####################################
##
#! @Section Constructors
##
####################################

DeclareOperation( "CATEGORY_OF_FP_MATRIX_BIALGEBRAS",
        [ IsCategoryOfFpMatrixAlgebras ] );

#! @Description
#!  The input is a category of finitely presented $k$-algebra over a commutative ring $k$.
#!  The output is the category of finitely presented matrix bialgebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpMatrixBialgebras", IsCategoryOfFpMatrixAlgebras );
#! @InsertChunk CategoryOfFpMatrixBialgebras

CapJitAddTypeSignature( "CategoryOfFpMatrixBialgebras", [ IsCategoryOfFpMatrixAlgebras ], function ( input_types )
    
    return CapJitDataTypeOfCategory( CategoryOfFpMatrixBialgebras( input_types[1].category ) );
    
end );

#! @Arguments lin_cat
DeclareAttribute( "CategoryOfFpMatrixBialgebras", IsCapCategory and IsLinearCategoryOverCommutativeRing );

#! @Description
#!  The input is a commutative ring <A>k</A>.
#!  The output is the category of finitely presented bialgebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpMatrixBialgebras", IsHomalgRing and IsCommutative );

#! @Arguments FpMatBialg_R, ring_map, fp_matrix_bialgebra
DeclareOperation( "Pullback",
        [ IsCategoryOfFpMatrixBialgebras, IsHomalgRingMap, IsObjectInCategoryOfFpMatrixBialgebras ] );

#! @Arguments ring_map, fp_matrix_bialgebra
DeclareOperation( "Pullback",
        [ IsHomalgRingMap, IsObjectInCategoryOfFpMatrixBialgebras ] );

if false then
#! @Arguments fp_matrix_bialgebra, FpMatBialg_R
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpMatrixBialgebras, IsCategoryOfFpMatrixBialgebras ] );
fi;

#! @Arguments R, fp_matrix_bialgebra
DeclareOperation( "*",
        [ IsHomalgRing, IsObjectInCategoryOfFpMatrixBialgebras ] );

#! @Arguments FpMatBialg_k, fp_matrix_algebra, counit, comult
DeclareOperation( "Bimonoid",
        [ IsCategoryOfFpMatrixBialgebras, IsObjectInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras ] );

#! @Arguments fp_matrix_algebra, counit, comult
DeclareOperation( "Bimonoid",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras ] );

#! @Arguments FpMatBialg_k, fp_matrix_algebra, counit_on_generators, comult_on_generators
DeclareOperation( "Bimonoid",
        [ IsCategoryOfFpMatrixBialgebras, IsObjectInCategoryOfFpMatrixAlgebras, IsList, IsList ] );

#! @Arguments fp_matrix_algebra, counit_on_generators, comult_on_generators
DeclareOperation( "Bimonoid",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsList, IsList ] );

#! @Arguments fp_matrix_algebra, counit_record, comult_record
DeclareOperation( "Bimonoid",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsRecord, IsRecord ] );

#! @Arguments fp_matrix_algebra, counit_record, comult_record
DeclareOperation( "AffineVarietyOfBimonoids",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsRecord, IsRecord ] );
