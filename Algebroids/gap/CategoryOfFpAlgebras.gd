# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of finitely presented associative unital algebras

####################################
##
#! @Section GAP categories
##
####################################

#! @Description
#!  The &GAP; category of categories of finitely presented associative unital algebras.
#! @Arguments category
DeclareCategory( "IsCategoryOfFpAlgebras", IsCapCategory );

#! @Description
#!  The &GAP; category of finitely presented associative unital algebras.
#! @Arguments object
DeclareCategory( "IsObjectInCategoryOfFpAlgebras", IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms of finitely presented associative unital algebras.
#! @Arguments morphism
DeclareCategory( "IsMorphismInCategoryOfFpAlgebras", IsCapCategoryMorphism );

####################################
##
#! @Section Attributes
##
####################################

#! @Description
#!  The input is a category of finitely presented associative unital $k$-algebras.
#!  The output is an underlying category of $k$-modules.
#! @Arguments FpAlg_k
DeclareAttribute( "UnderlyingCategory", IsCategoryOfFpAlgebras );

CapJitAddTypeSignature( "UnderlyingCategory", [ IsCategoryOfFpAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategory( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented associative unital $k$-algebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments FpAlg_k
DeclareAttribute( "CoefficientsRing", IsCategoryOfFpAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsCategoryOfFpAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a finitely presented associative unital $k$-algebra.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments fp_algebra
DeclareAttribute( "CoefficientsRing", IsObjectInCategoryOfFpAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsObjectInCategoryOfFpAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( CapCategory( input_types[1].category ) ) );
    
end );

#! @Arguments fp_algebra
DeclareAttribute( "DefiningSeptupleOfFinitelyPresentedAlgebra",
        IsObjectInCategoryOfFpAlgebras );

#! @Arguments fp_algebra_morphism
DeclareAttribute( "ListOfImages",
        IsMorphismInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital algebra.
#!  The output is the number of generators.
#! @Arguments fp_algebra
DeclareOperation( "NrGenerators",
        [ IsObjectInCategoryOfFpAlgebras ] );

#! @Description
#!  The input is a finitely presented associative unital algebra.
#!  The output is the list of generators of the underlying finitely presented associative unital algebra.
#! @Arguments fp_algebra
DeclareAttribute( "Generators",
        IsObjectInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital $k$-algebra.
#!  The output is the corresponding ambient free $k$-algebra
#!  as a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_algebra
DeclareAttribute( "AssociatedLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital algebra.
#!  The output its list of defining relations.
#! @Arguments fp_algebra
DeclareAttribute( "DefiningRelations",
        IsObjectInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital algebra.
#!  The output is the Gr√∂bner basis of its list of defining relations.
#! @Arguments fp_algebra
DeclareAttribute( "GroebnerBasisOfDefiningRelations",
        IsObjectInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital $k$-algebra.
#!  The output is the corresponding underlying finitely presented associative unital $k$-algebra
#!  as a quotient of a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_algebra
DeclareAttribute( "AssociatedQuotientCategoryOfLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital $k$-algebra.
#!  The output its $k$-dimension.
#! @Arguments fp_algebra
DeclareAttribute( "Dimension",
        IsObjectInCategoryOfFpAlgebras );

#! @Description
#!  The input is a finitely presented associative unital algebra.
#!  The output is the corresponding ambient free algebra.
#! @Arguments fp_algebra
DeclareAttribute( "AmbientAlgebra",
        IsObjectInCategoryOfFpAlgebras );

#! @Arguments fp_algebra_morphism
DeclareAttribute( "AssociatedFunctorOfLinearClosuresOfPathCategoriesData",
        IsMorphismInCategoryOfFpAlgebras );

####################################
##
#! @Section Operations
##
####################################

#! @Arguments FpAlg_k, fp_algebra_morphism, V, obj, list_of_morphisms
DeclareOperation( "EvaluateFpAlgebraMorphism",
        [ IsCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsCapCategory, IsCapCategoryObject, IsList ] );

#! @Arguments fp_algebra, list
DeclareOperation( "Counit",
        [ IsObjectInCategoryOfFpAlgebras, IsList ] );

#! @Arguments fp_algebra, list
DeclareOperation( "Comultiplication",
        [ IsObjectInCategoryOfFpAlgebras, IsList ] );

####################################
##
#! @Section Constructors
##
####################################

#! @Description
#!  The input is a $k$-linear category <A>lin_cat</A> of $k$-modules.
#!  The output is the category of finitely presented associative unital algebras over $k$.
#! @Arguments lin_cat
DeclareAttribute( "CategoryOfFpAlgebras", IsCapCategory );
#! @InsertChunk CategoryOfFpAlgebras
CapJitAddTypeSignature( "CategoryOfFpAlgebras", [ IsCapCategory ], function ( input_types )
    
    return CapJitDataTypeOfCategory( CategoryOfFpAlgebras( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a commutative ring <A>k</A>.
#!  The output is the category of finitely presented associative unital algebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpAlgebras", IsHomalgRing );
#! @InsertChunk NonCodistributivityOfCategoryOfFpAlgebras

####################################
##
## Tools
##
####################################

DeclareOperation( "CreateAmbientLinearClosureOfFpAlgebra",
        [ IsCategoryOfRows, IsInt, IsString ] );
