# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of finitely presented Hopf algebras

####################################
##
#! @Section GAP categories
##
####################################

#! @Description
#!  The &GAP; category of categories of finitely presented Hopf algebras.
#! @Arguments category
DeclareCategory( "IsCategoryOfFpHopfAlgebras", IsCapCategory );

#! @Description
#!  The &GAP; category of finitely presented Hopf algebras.
#! @Arguments object
DeclareCategory( "IsObjectInCategoryOfFpHopfAlgebras", IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms of finitely presented Hopf algebras.
#! @Arguments morphism
DeclareCategory( "IsMorphismInCategoryOfFpHopfAlgebras", IsCapCategoryMorphism );

####################################
##
#! @Section Attributes
##
####################################

#! @Description
#!  The input is a category of finitely presented Hopf $k$-algebras.
#!  The output is an underlying category of finitely presented $k$-algebras.
#! @Arguments FpHopfAlg_k
DeclareAttribute( "UnderlyingCategory", IsCategoryOfFpHopfAlgebras );

CapJitAddTypeSignature( "UnderlyingCategory", [ IsCategoryOfFpHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategory( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented Hopf $k$-algebras.
#!  The output is an underlying category of finitely presented $k$-bialgebras.
#! @Arguments FpHopfAlg_k
DeclareAttribute( "UnderlyingCategoryOfFpBialgebras", IsCategoryOfFpHopfAlgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfFpBialgebras", [ IsCategoryOfFpHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfFpBialgebras( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented Hopf $k$-algebras.
#!  The output is an underlying category of $k$-matrices.
#! @Arguments FpHopfAlg_k
DeclareAttribute( "UnderlyingCategoryOfMatrices", IsCategoryOfFpHopfAlgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfMatrices", [ IsCategoryOfFpHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfMatrices( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented Hopf $k$-algebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments FpHopfAlg_k
DeclareAttribute( "CoefficientsRing", IsCategoryOfFpHopfAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsCategoryOfFpHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a finitely presented Hopf $k$-algebra.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "CoefficientsRing", IsObjectInCategoryOfFpHopfAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsObjectInCategoryOfFpHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( CapCategory( input_types[1].category ) ) );
    
end );

#! @Arguments fp_hopf_algebra
DeclareAttribute( "DefiningDecupleOfFinitelyPresentedHopfAlgebra",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Arguments fp_hopf_algebra_morphism
DeclareAttribute( "ListOfImages",
        IsMorphismInCategoryOfFpHopfAlgebras );

#! @Arguments fp_hopf_algebra
DeclareAttribute( "UnderlyingFpAlgebra",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Arguments fp_hopf_algebra
DeclareAttribute( "UnderlyingFpBialgebra",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Description
#!  The input is a finitely presented Hopf algebra.
#!  The output is the number of generators.
#! @Arguments fp_hopf_algebra
DeclareOperation( "NrGenerators",
        [ IsObjectInCategoryOfFpHopfAlgebras ] );

#! @Description
#!  The input is a finitely presented Hopf algebra.
#!  The output is the list of generators of the underlying finitely presented Hopf algebra.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "Generators",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Description
#!  The input is a finitely presented Hopf $k$-algebra.
#!  The output is the corresponding ambient free $k$-algebra
#!  as a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "AssociatedLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Description
#!  The input is a finitely presented Hopf algebra.
#!  The output its list of defining relations.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "DefiningRelations",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Description
#!  The input is a finitely presented Hopf algebra.
#!  The output is the Gr√∂bner basis of its list of defining relations.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "GroebnerBasisOfDefiningRelations",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Description
#!  The input is a finitely presented Hopf $k$-algebra.
#!  The output is the corresponding underlying finitely presented Hopf $k$-algebra
#!  as a quotient of a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "AssociatedQuotientCategoryOfLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Description
#!  The input is a finitely presented Hopf $k$-algebra.
#!  The output its $k$-dimension.
#! @Arguments fp_hopf_algebra
DeclareAttribute( "Dimension",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Arguments fp_hopf_algebra_morphism
DeclareAttribute( "AssociatedFunctorOfLinearClosuresOfPathCategoriesData",
        IsMorphismInCategoryOfFpHopfAlgebras );

#!
DeclareAttribute( "OppositeAlgebra",
        IsObjectInCategoryOfFpHopfAlgebras );

#! @Arguments fp_algebra
DeclareAttribute( "HopfMonoid",
        IsObjectInCategoryOfFpAlgebras );

#! @Arguments fp_algebra
DeclareAttribute( "AffineVarietyOfHopfMonoids",
        IsObjectInCategoryOfFpAlgebras );

#! @Arguments fp_bialgebra
DeclareAttribute( "AffineVarietyOfHopfMonoids",
        IsObjectInCategoryOfFpBialgebras );

#!
DeclareAttribute( "UnderlyingFpHopfAlgebra",
        IsObjectInCategoryOfInternalHopfMonoids );

#!
DeclareAttribute( "FpHopfAlgebraAsInternalHopfMonoid",
        IsObjectInCategoryOfFpHopfAlgebras );

####################################
##
#! @Section Operations
##
####################################

if false then
#! @Arguments fp_hopf_algebra, HmonB
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpHopfAlgebras, IsCategoryOfInternalHopfMonoids ] );
fi;

####################################
##
#! @Section Constructors
##
####################################

DeclareOperation( "CATEGORY_OF_FP_HOPF_ALGEBRAS",
        [ IsCategoryOfFpBialgebras ] );

#! @Description
#!  The input is a category of finitely presented $k$-algebra over a commutative ring $k$.
#!  The output is the category of finitely presented Hopf algebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpHopfAlgebras", IsCategoryOfFpBialgebras );
#! @InsertChunk CategoryOfFpHopfAlgebras

CapJitAddTypeSignature( "CategoryOfFpHopfAlgebras", [ IsCategoryOfFpBialgebras ], function ( input_types )
    
    return CapJitDataTypeOfCategory( CategoryOfFpHopfAlgebras( input_types[1].category ) );
    
end );

#! @Arguments lin_cat
DeclareAttribute( "CategoryOfFpHopfAlgebras", IsCapCategory and IsLinearCategoryOverCommutativeRing );

#! @Description
#!  The input is a commutative ring <A>k</A>.
#!  The output is the category of finitely presented Hopf algebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpHopfAlgebras", IsHomalgRing and IsCommutative );

#! @Arguments FpHopfAlg_R, ring_map, fp_hopf_algebra
DeclareOperation( "Pullback",
        [ IsCategoryOfFpHopfAlgebras, IsHomalgRingMap, IsObjectInCategoryOfFpHopfAlgebras ] );

#! @Arguments ring_map, fp_hopf_algebra
DeclareOperation( "Pullback",
        [ IsHomalgRingMap, IsObjectInCategoryOfFpHopfAlgebras ] );

if false then
#! @Arguments fp_hopf_algebra, FpMatHopfAlg_R
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpHopfAlgebras, IsCategoryOfFpHopfAlgebras ] );
fi;

#! @Arguments R, fp_hopf_algebra
DeclareOperation( "*",
        [ IsHomalgRing, IsObjectInCategoryOfFpHopfAlgebras ] );

#! @Arguments FpHopfAlg_k, fp_bialgebra, antipode
DeclareOperation( "HopfMonoid",
        [ IsCategoryOfFpHopfAlgebras, IsObjectInCategoryOfFpBialgebras, IsCapCategoryMorphism ] );

#! @Arguments FpHopfAlg_k, fp_algebra, counit, comult, antipode
DeclareOperation( "HopfMonoid",
        [ IsCategoryOfFpHopfAlgebras,
          IsObjectInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras ] );

#! @Arguments fp_algebra, counit, comult, antipode
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras, IsMorphismInCategoryOfFpAlgebras ] );

#! @Arguments FpHopfAlg_k, fp_bialgebra, antipode_on_generators
DeclareOperation( "HopfMonoid",
        [ IsCategoryOfFpHopfAlgebras, IsObjectInCategoryOfFpBialgebras, IsList ] );

#! @Arguments fp_bialgebra, antipode_on_generators
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpBialgebras, IsList ] );

#! @Arguments fp_algebra, counit_on_generators, comult_on_generators, antipode_on_generators
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpAlgebras, IsList, IsList, IsList ] );

#! @Arguments fp_bialgebra, antipode_record
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpBialgebras, IsRecord ] );

#! @Arguments fp_algebra, counit_record, comult_record, antipode_record
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpAlgebras, IsRecord, IsRecord, IsRecord ] );

#! @Arguments fp_algebra, counit_record, comult_record, antipode_record
DeclareOperation( "AffineVarietyOfHopfMonoids",
        [ IsObjectInCategoryOfFpAlgebras, IsRecord, IsRecord, IsRecord ] );
