# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Implementations
#

##
InstallMethod( CategoryOfFpMatrixAlgebras,
        "for a category of finitely presented algebras and an additive category",
        [ IsCategoryOfFpAlgebras, IsCapCategory ],

  FunctionWithNamedArguments(
  [ [ "FinalizeCategory", true ],
  ],
  function( CAP_NAMED_ARGUMENTS, FpAlg_k, V )
    local k, name, FpMatAlg_k;
    
    k := CoefficientsRing( FpAlg_k );
    
    Assert( 0, IsAdditiveCategory( V ) );
    Assert( 0, IsLinearCategoryOverCommutativeRing( V ) );
    
    name := Concatenation( "CategoryOfFpMatrixAlgebras( ", RingName( k ), " )" );
    
    ##
    FpMatAlg_k :=
      CreateCapCategoryWithDataTypes( name,
              IsCategoryOfFpMatrixAlgebras,
              IsObjectInCategoryOfFpMatrixAlgebras,
              IsMorphismInCategoryOfFpMatrixAlgebras,
              IsCapCategoryTwoCell,
              CapJitDataTypeOfNTupleOf( 2,
                      CapJitDataTypeOfObjectOfCategory( FpAlg_k ),
                      CapJitDataTypeOfNTupleOf( 2,
                              CapJitDataTypeOfObjectOfCategory( V ),
                              CapJitDataTypeOfListOf( CapJitDataTypeOfMorphismOfCategory( V ) ) ) ),
              CapJitDataTypeOfListOf( CapJitDataTypeOfMorphismOfCategory( FpAlg_k ) ),
              fail );
    
    SetIsCartesianCategory( FpMatAlg_k, true );
    SetIsCategoryWithInitialObject( FpMatAlg_k, true );
    SetIsCategoryWithCoequalizers( FpMatAlg_k, true );
    SetIsSymmetricMonoidalCategory( FpMatAlg_k, true );
    
    FpMatAlg_k!.supports_empty_limits := true;
    
    SetUnderlyingCategoryOfFpAlgebras( FpMatAlg_k, FpAlg_k );
    SetUnderlyingCategoryOfMatrices( FpMatAlg_k, V );
    SetCoefficientsRing( FpMatAlg_k, k );
    
    FpMatAlg_k!.compiler_hints :=
      rec( category_attribute_names :=
           [ "UnderlyingCategoryOfFpAlgebras",
             "UnderlyingCategoryOfMatrices",
             "CoefficientsRing",
             ] );
    
    ##
    AddObjectConstructor( FpMatAlg_k,
      function( FpMatAlg_k, pair_of_fp_matrix_algebra )
        
        return CreateCapCategoryObjectWithAttributes( FpMatAlg_k,
                       DefiningPairOfFinitelyPresentedMatrixAlgebra, pair_of_fp_matrix_algebra );
        
        
    end );
    
    ##
    AddObjectDatum( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra )
        
        return DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra );
        
    end );
    
    ##
    AddMorphismConstructor( FpMatAlg_k,
      function( FpMatAlg_k, source, list_of_fp_algebra_morphisms, target )
        
        #% CAP_JIT_DROP_NEXT_STATEMENT
        Assert( 0, not IsEmpty( list_of_fp_algebra_morphisms ) );
        
        return CreateCapCategoryMorphismWithAttributes( FpMatAlg_k,
                       source,
                       target,
                       UnderlyingListOfMorphismsInCategoryOfFpAlgebras, list_of_fp_algebra_morphisms );
        
    end );
    
    ##
    AddMorphismDatum( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra_morphism )
        
        return UnderlyingListOfMorphismsInCategoryOfFpAlgebras( fp_matrix_algebra_morphism );
        
    end );
    
    ##
    AddIsEqualForObjects( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra1, fp_matrix_algebra2 )
        local FpAlg_k, V, pair1, pair2, nr_gens;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        pair1 := DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra1 );
        pair2 := DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra2 );
        
        nr_gens := DefiningSeptupleOfFinitelyPresentedAlgebra( pair1[1] )[3];
        
        return IsEqualForObjects( FpAlg_k, pair1[1], pair2[1] ) and
               IsEqualForObjects( V, pair1[2][1], pair2[2][1] ) and
               ForAll( [ 1 .. nr_gens ], i -> IsEqualForMorphisms( V, pair1[2][2][i], pair2[2][2][i] ) );
        
    end );
    
    ##
    AddIsEqualForMorphisms( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra_morphism1, fp_matrix_algebra_morphism2 )
        local V, nr_gens, images1, images2;
        
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        nr_gens := DefiningSeptupleOfFinitelyPresentedAlgebra( DefiningPairOfFinitelyPresentedMatrixAlgebra( Source( fp_matrix_algebra_morphism1 ) )[1] )[3];
        
        images1 := ListOfMatrixImages( FpMatAlg_k, fp_matrix_algebra_morphism1 );
        images2 := ListOfMatrixImages( FpMatAlg_k, fp_matrix_algebra_morphism2 );
        
        return ForAll( [ 1 .. nr_gens ], i -> IsEqualForMorphisms( V, images1[i], images2[i] ) );
        
    end );
    
    ##
    AddIsCongruentForMorphisms( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra_morphism1, fp_matrix_algebra_morphism2 )
        local V, nr_gens, images1, images2;
        
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        nr_gens := DefiningSeptupleOfFinitelyPresentedAlgebra( DefiningPairOfFinitelyPresentedMatrixAlgebra( Source( fp_matrix_algebra_morphism1 ) )[1] )[3];
        
        images1 := ListOfMatrixImages( FpMatAlg_k, fp_matrix_algebra_morphism1 );
        images2 := ListOfMatrixImages( FpMatAlg_k, fp_matrix_algebra_morphism2 );
        
        return ForAll( [ 1 .. nr_gens ], i -> IsCongruentForMorphisms( V, images1[i], images2[i] ) );
        
    end );
    
    ##
    AddIsWellDefinedForObjects( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra )
        local FpAlg_k, V, pair, datum, nr_gens, nr_rels, rels, rep, rep_obj, rep_mors, coefs, smors;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        pair := DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra );
        
        datum := DefiningSeptupleOfFinitelyPresentedAlgebra( pair[1] );
        
        nr_gens := datum[3];
        nr_rels := datum[5];
        
        rels := datum[6];
        
        rep := pair[2];
        rep_obj := rep[1];
        rep_mors := rep[2];
        
        coefs := List( [ 1 .. nr_rels ], i -> CoefficientsList( rels[i] ) );
        smors := List( [ 1 .. nr_rels ], i ->
                       List( SupportMorphisms( rels[i] ), mor ->
                             PreComposeList( V,
                                     rep_obj,
                                     rep_mors{MorphismIndices( mor )},
                                     rep_obj ) ) );
        
        return Length( rep_mors ) = nr_gens and
               ForAll( [ 1 .. nr_rels ], i ->
                       IsZeroForMorphisms( V,
                               LinearCombinationOfMorphisms( V,
                                       rep_obj,
                                       coefs[i],
                                       smors[i],
                                       rep_obj ) ) );
        
    end );
    
    ##
    AddIsWellDefinedForMorphisms( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra_morphism )
        local FpAlg_k, V, list_of_fp_algebra_morphisms, S, T, datumS, datumT, lists_of_images, pairS, pairT,
              list_of_matrix_images, nr_rels_source, rels_source, rep_target_obj, coefs, smors,
              matrix_images_of_source_relations, nonzero, bool, obstruction;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        list_of_fp_algebra_morphisms := UnderlyingListOfMorphismsInCategoryOfFpAlgebras( fp_matrix_algebra_morphism );
        
        S := Source( First( list_of_fp_algebra_morphisms ) );
        T := Target( Last( list_of_fp_algebra_morphisms ) );
        
        datumS := DefiningSeptupleOfFinitelyPresentedAlgebra( S );
        datumT := DefiningSeptupleOfFinitelyPresentedAlgebra( T );
        
        lists_of_images := ListOfImages( PreComposeList( FpAlg_k, S, list_of_fp_algebra_morphisms, T ) );
        
        pairS := DefiningPairOfFinitelyPresentedMatrixAlgebra( Source( fp_matrix_algebra_morphism ) );
        pairT := DefiningPairOfFinitelyPresentedMatrixAlgebra( Target( fp_matrix_algebra_morphism ) );
        
        if IsEmpty( list_of_fp_algebra_morphisms ) then
            return false;
        elif not Length( lists_of_images ) = datumS[3] then
            return false;
        elif not ForAll( lists_of_images, image -> IsIdenticalObj( CapCategory( image ), datumT[1] ) ) then
            return false;
        elif not ( IsEqualForObjects( FpAlg_k, S, pairS[1] ) and IsEqualForObjects( FpAlg_k, T, pairT[1] ) ) then
            return false;
        fi;
        
        list_of_matrix_images := ListOfMatrixImages( FpMatAlg_k, fp_matrix_algebra_morphism );
        
        nr_rels_source := datumS[5];
        
        rels_source := datumS[6];
        
        rep_target_obj := pairT[2][1];
        
        coefs := List( [ 1 .. nr_rels_source ], i -> CoefficientsList( rels_source[i] ) );
        smors := List( [ 1 .. nr_rels_source ], i ->
                       List( SupportMorphisms( rels_source[i] ), mor ->
                             PreComposeList( V,
                                     rep_target_obj,
                                     list_of_matrix_images{MorphismIndices( mor )},
                                     rep_target_obj ) ) );
        
        matrix_images_of_source_relations :=
          List( [ 1 .. nr_rels_source ], i ->
                LinearCombinationOfMorphisms( V,
                        rep_target_obj,
                        coefs[i],
                        smors[i],
                        rep_target_obj ) );
        
        nonzero := Filtered( matrix_images_of_source_relations, mor -> not IsZeroForMorphisms( V, mor ) );
        
        ## instead of checking that the relations of the source algebra are mapped to zero modulo the relations of the target algebra,
        ## check that the matrix images in the target algebra of the generators of the source algebra satisfy the relations of the *source* algebra
        bool := IsEmpty( nonzero );
        
        #% CAP_JIT_DROP_NEXT_STATEMENT
        obstruction := ValueOption( "obstruction" );
        
        #% CAP_JIT_DROP_NEXT_STATEMENT
        if not bool and not obstruction = fail then
            Add( obstruction, Pair( nonzero, "IsWellDefinedForMorphisms" ) );
            return true;
        fi;
        
        return bool;
        
    end );
    
    ##
    AddIdentityMorphism( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       fp_matrix_algebra,
                       [ IdentityMorphism( FpAlg_k, DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1] ) ],
                       fp_matrix_algebra );
        
    end );
    
    ##
    AddPreCompose( FpMatAlg_k,
      function( FpMatAlg_k, pre_morphism, post_morphism )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       Source( pre_morphism ),
                       Concatenation(
                               UnderlyingListOfMorphismsInCategoryOfFpAlgebras( pre_morphism ),
                               UnderlyingListOfMorphismsInCategoryOfFpAlgebras( post_morphism ) ),
                       Target( post_morphism ) );
        
    end );
    
    ##
    AddDirectProduct( FpMatAlg_k,
      function( FpMatAlg_k, diagram )
        local FpAlg_k, V, l, pairs, fp_algebras, data, reps, reps_obj, reps_mors,
              sum_rep, prjs, injs, idems, mgens;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        l := Length( diagram );
        
        pairs := List( [ 1 .. l ], o -> DefiningPairOfFinitelyPresentedMatrixAlgebra( diagram[o] ) );
        
        fp_algebras := List( [ 1 .. l ], p -> pairs[p][1] );
        
        data := List( [ 1 .. l ], a -> DefiningSeptupleOfFinitelyPresentedAlgebra( fp_algebras[a] ) );
        
        reps := List( [ 1 .. l ], p -> pairs[p][2] );
        
        reps_obj := List( [ 1 .. l ], p -> reps[p][1] );
        reps_mors := List( [ 1 .. l ], p -> reps[p][2] );
        
        sum_rep := DirectSum( V, reps_obj );
        
        prjs := List( [ 1 .. l ], i -> ProjectionInFactorOfDirectSumWithGivenDirectSum( V, reps_obj, i, sum_rep ) );
        injs := List( [ 1 .. l ], i -> InjectionOfCofactorOfDirectSumWithGivenDirectSum( V, reps_obj, i, sum_rep ) );
        
        idems := List( [ 1 .. l ], i -> [ PreCompose( V, prjs[i], injs[i] ) ] );
        
        mgens := List( [ 1 .. l ], i -> List( reps_mors[i], mor -> PreComposeList( V, sum_rep, [ prjs[i], mor, injs[i] ], sum_rep ) ) );
        
        mgens := List( [ 1 .. l ], i -> Concatenation( mgens[i], idems[i] ) );
        
        return ObjectConstructor( FpMatAlg_k,
                       Pair( DirectProduct( FpAlg_k, fp_algebras ),
                             Pair( sum_rep, Concatenation( mgens ) ) ) );
        
    end );
    
    ##
    AddProjectionInFactorOfDirectProductWithGivenDirectProduct( FpMatAlg_k,
      function( FpMatAlg_k, diagram, p, product )
        local FpAlg_k, l;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        l := Length( diagram );
        
        return MorphismConstructor( FpMatAlg_k,
                       product,
                       [ ProjectionInFactorOfDirectProductWithGivenDirectProduct( FpAlg_k,
                               List( [ 1 .. l ], o -> DefiningPairOfFinitelyPresentedMatrixAlgebra( diagram[o] )[1] ),
                               p,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( product )[1] ) ],
                       diagram[p] );
        
    end );
    
    ##
    AddUniversalMorphismIntoDirectProductWithGivenDirectProduct( FpMatAlg_k,
      function( FpMatAlg_k, diagram, source, test_morphisms, product )
        local FpAlg_k, l;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        l := Length( diagram );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ UniversalMorphismIntoDirectProductWithGivenDirectProduct( FpAlg_k,
                               List( [ 1 .. l ], o -> DefiningPairOfFinitelyPresentedMatrixAlgebra( diagram[o] )[1] ),
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1],
                               List( [ 1 .. l ], m -> PreComposeList( FpAlg_k, UnderlyingListOfMorphismsInCategoryOfFpAlgebras( test_morphisms[m] ) ) ),
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( product )[1] ) ],
                       product );
        
    end );
    
    ##
    AddInitialObject( FpMatAlg_k,
      function( FpMatAlg_k )
        local FpAlg_k, V;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        return ObjectConstructor( FpMatAlg_k,
                       Pair( InitialObject( FpAlg_k ),
                             Pair( TensorUnit( V ),
                                   CapJitTypedExpression( [ ], cat -> CapJitDataTypeOfListOf( CapJitDataTypeOfMorphismOfCategory( V ) ) ) ) ) );
        
    end );
    
    ##
    AddUniversalMorphismFromInitialObjectWithGivenInitialObject( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra, k )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       k,
                       [ UniversalMorphismFromInitialObjectWithGivenInitialObject( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( k )[1] ) ],
                       fp_matrix_algebra );
        
    end );
    
    ##
    AddTensorUnit( FpMatAlg_k,
      function( FpMatAlg_k )
        
        return InitialObject( FpMatAlg_k );
        
    end );
    
    ##
    AddTensorProductOnObjects( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra1, fp_matrix_algebra2 )
        local FpAlg_k, V, pair1, pair2, fp_algebra1, fp_algebra2, datum1, datum2, nr_gens1, nr_gens2,
              rep1_obj, rep2_obj, id1, id2, rep1_mors, rep2_mors, rep_obj;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
        
        pair1 := DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra1 );
        pair2 := DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra2 );
        
        fp_algebra1 := pair1[1];
        fp_algebra2 := pair2[1];
        
        datum1 := DefiningSeptupleOfFinitelyPresentedAlgebra( fp_algebra1 );
        datum2 := DefiningSeptupleOfFinitelyPresentedAlgebra( fp_algebra2 );
        
        nr_gens1 := datum1[3];
        nr_gens2 := datum2[3];
        
        rep1_obj := pair1[2][1];
        rep2_obj := pair2[2][1];
        
        id1 := IdentityMorphism( V, rep1_obj );
        id2 := IdentityMorphism( V, rep2_obj );
        
        rep1_mors := pair1[2][2];
        rep2_mors := pair2[2][2];
        
        rep_obj := TensorProductOnObjects( V, rep1_obj, rep2_obj );
        
        return ObjectConstructor( FpMatAlg_k,
                       Pair( TensorProductOnObjects( FpAlg_k, pair1[1], pair2[1] ),
                             Pair( TensorProductOnObjects( V, rep1_obj, rep2_obj ),
                                   Concatenation(
                                           List( [ 1 .. nr_gens1 ], i ->
                                                 TensorProductOnMorphismsWithGivenTensorProducts( V,
                                                         rep_obj,
                                                         rep1_mors[i],
                                                         id2,
                                                         rep_obj ) ),
                                           List( [ 1 .. nr_gens2 ], i ->
                                                 TensorProductOnMorphismsWithGivenTensorProducts( V,
                                                         rep_obj,
                                                         id1,
                                                         rep2_mors[i],
                                                         rep_obj ) ) ) ) ) );
        
    end );
    
    ##
    AddTensorProductOnMorphismsWithGivenTensorProducts( FpMatAlg_k,
      function( FpMatAlg_k, source, fp_matrix_algebra_morphism1, fp_matrix_algebra_morphism2, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ TensorProductOnMorphismsWithGivenTensorProducts( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1],
                               PreComposeList( FpAlg_k, UnderlyingListOfMorphismsInCategoryOfFpAlgebras( fp_matrix_algebra_morphism1 ) ),
                               PreComposeList( FpAlg_k, UnderlyingListOfMorphismsInCategoryOfFpAlgebras( fp_matrix_algebra_morphism2 ) ),
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    ##
    AddLeftUnitorWithGivenTensorProduct( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra, source )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ LeftUnitorWithGivenTensorProduct( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1] ) ],
                       fp_matrix_algebra );
        
    end );
    
    ##
    AddLeftUnitorInverseWithGivenTensorProduct( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       fp_matrix_algebra,
                       [ LeftUnitorInverseWithGivenTensorProduct( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    ##
    AddRightUnitorWithGivenTensorProduct( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra, source )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ RightUnitorWithGivenTensorProduct( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1] ) ],
                       fp_matrix_algebra );
        
    end );
    
    ##
    AddRightUnitorInverseWithGivenTensorProduct( FpMatAlg_k,
      function( FpMatAlg_k, fp_matrix_algebra, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       fp_matrix_algebra,
                       [ RightUnitorInverseWithGivenTensorProduct( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    ##
    AddAssociatorLeftToRightWithGivenTensorProducts( FpMatAlg_k,
      function( FpMatAlg_k, source, fp_matrix_algebra1, fp_matrix_algebra2, fp_matrix_algebra3, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ AssociatorLeftToRightWithGivenTensorProducts( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra1 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra2 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra3 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    ##
    AddAssociatorRightToLeftWithGivenTensorProducts( FpMatAlg_k,
      function( FpMatAlg_k, source, fp_matrix_algebra1, fp_matrix_algebra2, fp_matrix_algebra3, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ AssociatorRightToLeftWithGivenTensorProducts( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra1 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra2 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra3 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    ##
    AddBraidingWithGivenTensorProducts( FpMatAlg_k,
      function( FpMatAlg_k, source, fp_matrix_algebra1, fp_matrix_algebra2, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ BraidingWithGivenTensorProducts( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra1 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra2 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    ##
    AddBraidingInverseWithGivenTensorProducts( FpMatAlg_k,
      function( FpMatAlg_k, source, fp_matrix_algebra1, fp_matrix_algebra2, target )
        local FpAlg_k;
        
        FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
        
        return MorphismConstructor( FpMatAlg_k,
                       source,
                       [ BraidingInverseWithGivenTensorProducts( FpAlg_k,
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( source )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra1 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra2 )[1],
                               DefiningPairOfFinitelyPresentedMatrixAlgebra( target )[1] ) ],
                       target );
        
    end );
    
    if CAP_NAMED_ARGUMENTS.FinalizeCategory then
        Finalize( FpMatAlg_k );
    fi;
    
    return FpMatAlg_k;
    
end ) );

##
InstallMethod( CategoryOfFpMatrixAlgebras,
        "for a homalg ring",
        [ IsHomalgRing ],
        
  function( k )
    
    Assert( 0, HasIsCommutative( k ) and IsCommutative( k ) );
    
    return CategoryOfFpMatrixAlgebras( CategoryOfFpAlgebras( k ), CategoryOfRows( k ) );
    
end );

##
InstallMethod( UnderlyingFpAlgebra,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[1];
    
end );

##
InstallMethod( NrGenerators,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return NrGenerators( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( Generators,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return Generators( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( MatrixGenerators,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return DefiningPairOfFinitelyPresentedMatrixAlgebra( fp_matrix_algebra )[2][2];
    
end );

##
InstallOtherMethodForCompilerForCAP( ListOfMatrixImages,
        "for a category of finitely presented matrix algebras and a morphism therein",
        [ IsCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras ],
        
  function( FpMatAlg_k, fp_matrix_algebra_morphism )
    local FpAlg_k, V, list_of_fp_algebra_morphisms, pairT, rep_target_obj, rep_target_mors, func;
    
    FpAlg_k := UnderlyingCategoryOfFpAlgebras( FpMatAlg_k );
    V := UnderlyingCategoryOfMatrices( FpMatAlg_k );
    
    list_of_fp_algebra_morphisms := UnderlyingListOfMorphismsInCategoryOfFpAlgebras( fp_matrix_algebra_morphism );
    
    pairT := DefiningPairOfFinitelyPresentedMatrixAlgebra( Target( fp_matrix_algebra_morphism ) );
    
    rep_target_obj := pairT[2][1];
    rep_target_mors := pairT[2][2];
    
    func :=
      function( list_of_endomorphisms, fp_algebra_morphisms )
        
        return EvaluateFpAlgebraMorphism( FpAlg_k, fp_algebra_morphisms, V, rep_target_obj, list_of_endomorphisms );
        
    end;
    
    return Iterated( Reversed( list_of_fp_algebra_morphisms ), func, rep_target_mors );
    
end );

##
InstallMethod( ListOfMatrixImages,
        "for a morphism of finitely presented matrix algebras",
        [ IsMorphismInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra_morphism )
    
    return ListOfMatrixImages( CapCategory( fp_matrix_algebra_morphism ), fp_matrix_algebra_morphism );
    
end );

##
InstallMethod( AssociatedLinearClosureOfPathCategory,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return AssociatedLinearClosureOfPathCategory( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( DefiningRelations,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return DefiningRelations( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( AssociatedQuotientCategoryOfLinearClosureOfPathCategory,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return AssociatedQuotientCategoryOfLinearClosureOfPathCategory( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( GroebnerBasisOfDefiningRelations,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return GroebnerBasisOfDefiningRelations( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( Dimension,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    
    return Dimension( UnderlyingFpAlgebra( fp_matrix_algebra ) );
    
end );

##
InstallMethod( \.,
        "for a finitely presented matrix algebra and a positive integer",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsPosInt ],
        
  function( fp_matrix_algebra, string_as_int )
    local name;
    
    name := NameRNam( string_as_int );
    
    ## never use AssociatedQuotientCategoryOfLinearClosureOfPathCategory below since it
    ## will trigger a GB computation followed by a HasFiniteNumberOfMacaulayMorphisms/MacaulayMorphisms:
    return AssociatedLinearClosureOfPathCategory( fp_matrix_algebra ).(name);
    
end );

##
InstallMethod( Counit,
        "for a finitely presented matrix algebra and a list",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsList ],
        
  function( fp_matrix_algebra, list_of_images_of_counit )
    local FpMatAlg_k, U, fp_algebra;
    
    FpMatAlg_k := CapCategory( fp_matrix_algebra );
    
    U := TensorUnit( FpMatAlg_k );
    
    fp_algebra := UnderlyingFpAlgebra( fp_matrix_algebra );
    
    return MorphismConstructor( FpMatAlg_k,
                   fp_matrix_algebra,
                   [ Counit( fp_algebra, list_of_images_of_counit ) ],
                   U );
    
end );

##
InstallMethod( Comultiplication,
        "for a finitely presented matrix algebra and a list",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsList ],
        
  function( fp_matrix_algebra, list_of_images_of_comult )
    local FpMatAlg_k, fp_matrix_algebra2, fp_algebra;
    
    FpMatAlg_k := CapCategory( fp_matrix_algebra );
    
    fp_matrix_algebra2 := TensorProductOnObjects( FpMatAlg_k, fp_matrix_algebra, fp_matrix_algebra );
    
    fp_algebra := UnderlyingFpAlgebra( fp_matrix_algebra );
    
    return MorphismConstructor( FpMatAlg_k,
                   fp_matrix_algebra,
                   [ Comultiplication( fp_algebra, list_of_images_of_comult ) ],
                   fp_matrix_algebra2 );
    
end );

####################################
#
# View, Print, Display and LaTeX methods:
#
####################################

##
InstallMethod( DisplayString,
        "for a finitely presented matrix algebra",
        [ IsObjectInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra )
    local pair, string;
    
    pair := ObjectDatum( fp_matrix_algebra );
    
    string := Concatenation( List( pair[2][2], mor ->
                      Concatenation( StringDisplay( UnderlyingMatrix( mor ) ), "\n" ) ) );
    
    string := Concatenation( string, DisplayString( pair[1] ) );
    
    if NrGenerators( fp_matrix_algebra ) > 0 then
        string := Concatenation( string, "\na finitely presented matrix algebra with the above matrix generators\n" );
    else
        string := Concatenation( string, "\na finitely presented matrix algebra with an empty list of matrix generators\n" );
    fi;
    
    return string;
    
end );

##
InstallMethod( DisplayString,
        "for a finitely presented matrix algebra morphism",
        [ IsMorphismInCategoryOfFpMatrixAlgebras ],
        
  function( fp_matrix_algebra_morphism )
    
    return DisplayString( PreComposeList( MorphismDatum( fp_matrix_algebra_morphism ) ) );
    
end );
