# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of finitely presented associative unital matrix algebras

####################################
##
#! @Section GAP categories
##
####################################

#! @Description
#!  The &GAP; category of categories of finitely presented associative unital matrix algebras.
#! @Arguments category
DeclareCategory( "IsCategoryOfFinitelyPresentedMatrixAlgebras", IsCapCategory );

#! @Description
#!  The &GAP; category of finitely presented associative unital matrix algebras.
#! @Arguments object
DeclareCategory( "IsObjectInCategoryOfFpMatrixAlgebras", IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms of finitely presented associative unital matrix algebras.
#! @Arguments morphism
DeclareCategory( "IsMorphismInCategoryOfFpMatrixAlgebras", IsCapCategoryMorphism );

####################################
##
#! @Section Attributes
##
####################################

#! @Description
#!  The input is a category of finitely presented associative unital matrix algebras.
#!  The output is the underlying category of finitely presented algebras.
#! @Arguments MatAlg_k
DeclareAttribute( "UnderlyingCategoryOfFpAlgebras", IsCategoryOfFinitelyPresentedMatrixAlgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfFpAlgebras", [ IsCategoryOfFinitelyPresentedMatrixAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfFpAlgebras( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented associative unital matrix $k$-algebras.
#!  The output is the underlying category of $k$-matrices.
#! @Arguments MatAlg_k
DeclareAttribute( "UnderlyingCategoryOfMatrices", IsCategoryOfFinitelyPresentedMatrixAlgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfMatrices", [ IsCategoryOfFinitelyPresentedMatrixAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfMatrices( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented associative unital matrix $k$-algebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments MatAlg_k
DeclareAttribute( "CoefficientsRing", IsCategoryOfFinitelyPresentedMatrixAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsCategoryOfFinitelyPresentedMatrixAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "CoefficientsRing", IsObjectInCategoryOfFpMatrixAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsObjectInCategoryOfFpMatrixAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( CapCategory( input_types[1].category ) ) );
    
end );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebras.
#!  The output is a pair.
#!  Its first entry is the underlying finitely presented $k$-algebra
#!  Its second entry is a pair with first entry an object in the
#!  the underlying category $V$ of $k$-matrices and
#!  a list of morphisms in $V$.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "DefiningPairOfFinitelyPresentedMatrixAlgebra",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix algebra.
#!  The output is the underlying list of morphisms connecting the underlying
#!  finitely presented algebras.
#! @Arguments fp_matrix_algebra_morphism
DeclareAttribute( "UnderlyingListOfMorphismsInCategoryOfFpAlgebras",
        IsMorphismInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix algebra.
#!  The output is the list of matrix images of the generators of the source algebra.
#! @Arguments fp_matrix_algebra_morphism
DeclareAttribute( "ListOfMatrixImages",
        IsMorphismInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix algebra.
#!  The output is the number of generators.
#! @Arguments fp_matrix_algebra
DeclareOperation( "NrGenerators",
        [ IsObjectInCategoryOfFpMatrixAlgebras ] );

#! @Description
#!  The input is a finitely presented associative unital matrix algebra.
#!  The output is the list of generators of the underlying finitely presented algebra.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "Generators",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebra.
#!  The output is the list of matrix generators as morphisms in the
#!  underlying category of $k$-matrices.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "MatrixGenerators",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebra.
#!  The output is the corresponding ambient free $k$-algebra
#!  as a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "AssociatedLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix algebra.
#!  The output its list of defining relations.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "DefiningRelations",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix algebra.
#!  The output is the Gr√∂bner basis of its list of defining relations.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "GroebnerBasisOfDefiningRelations",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebra.
#!  The output is the corresponding underlying finitely presented $k$-algebra
#!  as a quotient of a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "AssociatedQuotientCategoryOfLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebra.
#!  The output its $k$-dimension.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "Dimension",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Description
#!  The input is a finitely presented associative unital matrix $k$-algebra.
#!  The output is the corresponding ambient free $k$-algebra.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "AmbientAlgebra",
        IsObjectInCategoryOfFpMatrixAlgebras );

####################################
##
#! @Section Operations
##
####################################

#! @Arguments fp_matrix_algebra, list
DeclareOperation( "Counit",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsList ] );

#! @Arguments fp_matrix_algebra, list
DeclareOperation( "Comultiplication",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsList ] );

####################################
##
#! @Section Constructors
##
####################################

#! @Description
#!  The input is a category <A>Alg_k</A> of finitely presented $k$-algebras and
#!  a category <A>V</A> of $k$-matrices.
#!  The output is the category of finitely presented associative unital matrix algebras over $k$.
#! @Arguments Alg_k, V
DeclareOperation( "CategoryOfFpMatrixAlgebras",
        [ IsCategoryOfFinitelyPresentedAlgebras, IsCapCategory ] );
#! @InsertChunk CategoryOfFpMatrixAlgebras

#! @Description
#!  The input is a commutative ring <A>k</A>.
#!  The output is the category of finitely presented associative unital matrix algebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpMatrixAlgebras",
        IsHomalgRing );

CapJitAddTypeSignature( "CategoryOfFpMatrixAlgebras", [ IsCategoryOfFinitelyPresentedAlgebras ], function ( input_types )
    
    return CapJitDataTypeOfCategory( CategoryOfFpMatrixAlgebras( input_types[1].category ) );
    
end );
