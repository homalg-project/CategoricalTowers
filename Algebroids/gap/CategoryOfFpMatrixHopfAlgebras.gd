# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Category of finitely presented matrix Hopf algebras

####################################
##
#! @Section GAP categories
##
####################################

#! @Description
#!  The &GAP; category of categories of finitely presented matrix Hopf algebras.
#! @Arguments category
DeclareCategory( "IsCategoryOfFpMatrixHopfAlgebras", IsCapCategory );

#! @Description
#!  The &GAP; category of finitely presented matrix Hopf algebras.
#! @Arguments object
DeclareCategory( "IsObjectInCategoryOfFpMatrixHopfAlgebras", IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms of finitely presented matrix Hopf algebras.
#! @Arguments morphism
DeclareCategory( "IsMorphismInCategoryOfFpMatrixHopfAlgebras", IsCapCategoryMorphism );

####################################
##
#! @Section Attributes
##
####################################

#! @Description
#!  The input is a category of finitely presented matrix Hopf $k$-algebras.
#!  The output is an underlying category of finitely presented matrix $k$-algebras.
#! @Arguments FpMatHopfAlg_k
DeclareAttribute( "UnderlyingCategory", IsCategoryOfFpMatrixHopfAlgebras );

CapJitAddTypeSignature( "UnderlyingCategory", [ IsCategoryOfFpMatrixHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategory( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix Hopf $k$-algebras.
#!  The output is an underlying category of finitely presented matrix $k$-bialgebras.
#! @Arguments FpMatHopfAlg_k
DeclareAttribute( "UnderlyingCategoryOfFpMatrixBialgebras", IsCategoryOfFpMatrixHopfAlgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfFpMatrixBialgebras", [ IsCategoryOfFpMatrixHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfFpMatrixBialgebras( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix Hopf $k$-bialgebras.
#!  The output is the underlying category of $k$-matrices.
#! @Arguments FpMatHopfAlg_k
DeclareAttribute( "UnderlyingCategoryOfMatrices", IsCategoryOfFpMatrixHopfAlgebras );

CapJitAddTypeSignature( "UnderlyingCategoryOfMatrices", [ IsCategoryOfFpMatrixHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfCategory( UnderlyingCategoryOfMatrices( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a category of finitely presented matrix $k$-bialgebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments FpMatHopfAlg_k
DeclareAttribute( "CoefficientsRing", IsCategoryOfFpMatrixHopfAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsCategoryOfFpMatrixHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( input_types[1].category ) );
    
end );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebras.
#!  The output is the underlying commutative ring $k$ of coefficients.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "CoefficientsRing", IsObjectInCategoryOfFpMatrixHopfAlgebras );

CapJitAddTypeSignature( "CoefficientsRing", [ IsObjectInCategoryOfFpMatrixHopfAlgebras ],
  function ( input_types )
    
    return CapJitDataTypeOfRing( CoefficientsRing( CapCategory( input_types[1].category ) ) );
    
end );

#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "DefiningQuadrupleOfFinitelyPresentedMatrixHopfAlgebra",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Arguments fp_matrix_hopf_algebra_morphism
DeclareAttribute( "UnderlyingMorphismInCategoryOfFpMatrixAlgebras",
        IsMorphismInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix Hopf algebra.
#!  The output is the number of generators.
#! @Arguments fp_matrix_hopf_algebra
DeclareOperation( "NrGenerators",
        [ IsObjectInCategoryOfFpMatrixHopfAlgebras ] );

#! @Description
#!  The input is a finitely presented matrix Hopf algebra.
#!  The output is the list of generators of the underlying finitely presented Hopf algebra.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "Generators",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output is the corresponding ambient free $k$-algebra
#!  as a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "AssociatedLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix Hopf algebra.
#!  The output its list of defining relations.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "DefiningRelations",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix Hopf algebra.
#!  The output is the Gr√∂bner basis of its list of defining relations.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "GroebnerBasisOfDefiningRelations",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output is the corresponding underlying finitely presented associative unital $k$-algebra
#!  as a quotient of a $k$-linear closure of a path category of loops on a single vertex.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "AssociatedQuotientCategoryOfLinearClosureOfPathCategory",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix $k$-bialgebra.
#!  The output its $k$-dimension.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "Dimension",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix Hopf algebra.
#!  The output is the corresponding ambient free algebra.
#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "AmbientAlgebra",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Arguments fp_matrix_hopf_algebra_morphism
DeclareAttribute( "AssociatedFunctorOfLinearClosuresOfPathCategoriesData",
        IsMorphismInCategoryOfFpMatrixHopfAlgebras );

#!
DeclareAttribute( "OppositeAlgebra",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Arguments fp_matrix_algebra
DeclareAttribute( "HopfMonoid",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Arguments fp_matrix_algebra
DeclareAttribute( "AffineVarietyOfHopfMonoids",
        IsObjectInCategoryOfFpMatrixAlgebras );

#! @Arguments fp_matrix_bialgebra
DeclareAttribute( "AffineVarietyOfHopfMonoids",
        IsObjectInCategoryOfFpMatrixBialgebras );

#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "UnderlyingFpMatrixAlgebra",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Description
#!  The input is a finitely presented matrix Hopf $k$-algebra.
#!  The output is is the underlying finitely presented Hopf $k$-algebra.
#! @Arguments fp_matrix_algebra
DeclareAttribute( "UnderlyingFpHopfAlgebra",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Arguments hopf_monoid
DeclareAttribute( "UnderlyingFpMatrixHopfAlgebra",
        IsObjectInCategoryOfInternalHopfMonoids );

#! @Arguments fp_matrix_hopf_algebra
DeclareAttribute( "FpMatrixHopfAlgebraAsInternalHopfMonoid",
        IsObjectInCategoryOfFpMatrixHopfAlgebras );

#! @Arguments fp_hopf_algebra
DeclareAttribute( "YonedaFpMatrixHopfAlgebra",
        IsObjectInCategoryOfFpHopfAlgebras );

####################################
##
#! @Section Operations
##
####################################

if false then
#! @Arguments fp_matrix_hopf_algebra, HmonB
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpMatrixHopfAlgebras, IsCategoryOfInternalHopfMonoids ] );
fi;

####################################
##
#! @Section Constructors
##
####################################

DeclareOperation( "CATEGORY_OF_FP_MATRIX_HOPF_ALGEBRAS",
        [ IsCategoryOfFpMatrixBialgebras ] );

#! @Description
#!  The input is a category of finitely presented $k$-algebra over a commutative ring $k$.
#!  The output is the category of finitely presented matrix Hopf algebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpMatrixHopfAlgebras", IsCategoryOfFpMatrixBialgebras );
#! @InsertChunk CategoryOfFpMatrixHopfAlgebras

CapJitAddTypeSignature( "CategoryOfFpMatrixHopfAlgebras", [ IsCategoryOfFpMatrixBialgebras ], function ( input_types )
    
    return CapJitDataTypeOfCategory( CategoryOfFpMatrixHopfAlgebras( input_types[1].category ) );
    
end );

#! @Arguments lin_cat
DeclareAttribute( "CategoryOfFpMatrixHopfAlgebras", IsCapCategory and IsLinearCategoryOverCommutativeRing );

#! @Description
#!  The input is a commutative ring <A>k</A>.
#!  The output is the category of finitely presented matrix Hopf algebras over $k$.
#! @Arguments k
DeclareAttribute( "CategoryOfFpMatrixHopfAlgebras", IsHomalgRing and IsCommutative );

#! @Arguments FpMatHopfAlg_R, ring_map, fp_matrix_hopf_algebra
DeclareOperation( "Pullback",
        [ IsCategoryOfFpMatrixHopfAlgebras, IsHomalgRingMap, IsObjectInCategoryOfFpMatrixHopfAlgebras ] );

#! @Arguments ring_map, fp_matrix_hopf_algebra
DeclareOperation( "Pullback",
        [ IsHomalgRingMap, IsObjectInCategoryOfFpMatrixHopfAlgebras ] );

if false then
#! @Arguments fp_matrix_hopf_algebra, FpMatHopfAlg_R
DeclareOperation( "/",
        [ IsObjectInCategoryOfFpMatrixHopfAlgebras, IsCategoryOfFpMatrixHopfAlgebras ] );
fi;

#! @Arguments R, fp_matrix_hopf_algebra
DeclareOperation( "*",
        [ IsHomalgRing, IsObjectInCategoryOfFpMatrixHopfAlgebras ] );

#! @Arguments FpMatHopfAlg_k, fp_matrix_bialgebra, antipode
DeclareOperation( "HopfMonoid",
        [ IsCategoryOfFpMatrixHopfAlgebras, IsObjectInCategoryOfFpMatrixBialgebras, IsCapCategoryMorphism ] );

#! @Arguments FpMatHopfAlg_k, fp_matrix_algebra, counit, comult, antipode
DeclareOperation( "HopfMonoid",
        [ IsCategoryOfFpMatrixHopfAlgebras,
          IsObjectInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras ] );

#! @Arguments fp_matrix_algebra, counit, comult, antipode
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras, IsMorphismInCategoryOfFpMatrixAlgebras ] );

#! @Arguments FpMatHopfAlg_k, fp_matrix_bialgebra, antipode_on_generators
DeclareOperation( "HopfMonoid",
        [ IsCategoryOfFpMatrixHopfAlgebras, IsObjectInCategoryOfFpMatrixBialgebras, IsList ] );

#! @Arguments fp_matrix_bialgebra, antipode_on_generators
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpMatrixBialgebras, IsList ] );

#! @Arguments fp_matrix_algebra, counit_on_generators, comult_on_generators, antipode_on_generators
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsList, IsList, IsList ] );

#! @Arguments fp_matrix_bialgebra, antipode_record
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpMatrixBialgebras, IsRecord ] );

#! @Arguments fp_matrix_algebra, counit_record, comult_record, antipode_record
DeclareOperation( "HopfMonoid",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsRecord, IsRecord, IsRecord ] );

#! @Arguments fp_matrix_algebra, counit_record, comult_record, antipode_record
DeclareOperation( "AffineVarietyOfHopfMonoids",
        [ IsObjectInCategoryOfFpMatrixAlgebras, IsRecord, IsRecord, IsRecord ] );
